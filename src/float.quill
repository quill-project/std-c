
mod std

pub ext fun Float::plus(lhs: Float, rhs: Float) -> Float = "
    return #var(lhs) + #var(rhs);
"

pub ext fun Float::minus(lhs: Float, rhs: Float) -> Float = "
    return #var(lhs) - #var(rhs);
"

pub ext fun Float::times(lhs: Float, rhs: Float) -> Float = "
    return #var(lhs) * #var(rhs);
"

pub ext fun Float::div(lhs: Float, rhs: Float) -> Float = "
    return #var(lhs) / #var(rhs);
"

pub ext fun Float::rem(lhs: Float, rhs: Float) -> Float = "
    return fmod(#var(lhs), #var(rhs));
"

pub ext fun Float::lt(lhs: Float, rhs: Float) -> Bool = "
    return #var(lhs) < #var(rhs);
"

pub ext fun Float::gt(lhs: Float, rhs: Float) -> Bool = "
    return #var(lhs) > #var(rhs);
"

pub ext fun Float::lt_eq(lhs: Float, rhs: Float) -> Bool = "
    return #var(lhs) <= #var(rhs);
"

pub ext fun Float::gt_eq(lhs: Float, rhs: Float) -> Bool = "
    return #var(lhs) >= #var(rhs);
"

pub ext fun Float::eq(lhs: Float, rhs: Float) -> Bool = "
    return #var(lhs) == #var(rhs);
"

pub ext fun Float::not_eq(lhs: Float, rhs: Float) -> Bool = "
    return #var(lhs) != #var(rhs);
"

pub ext fun Float::u_minus(x: Float) -> Float = "
    return -(#var(x));
"

pub ext fun Float::as_string(self: Float) -> String = "
    return quill_string_from_float(#var(self));
"

pub ext fun Float::as_int(self: Float) -> Int = "
    return (quill_int_t) #var(self);
"


pub ext fun Float::is_nan(self: Float) -> Bool = "return isnan(#var(self));"
pub ext fun Float::is_finite(self: Float) -> Bool = "return isfinite(#var(self));"
pub ext fun Float::is_infinite(self: Float) -> Bool = "return isinf(#var(self));"
pub ext fun Float::acos(self: Float) -> Float = "return acos(#var(self));"
pub ext fun Float::acosh(self: Float) -> Float = "return acosh(#var(self));"
pub ext fun Float::asin(self: Float) -> Float = "return asin(#var(self));"
pub ext fun Float::asinh(self: Float) -> Float = "return asinh(#var(self));"
pub ext fun Float::atan(self: Float) -> Float = "return atan(#var(self));"
pub ext fun Float::atan2(x: Float, y: Float) -> Float 
    = "return atan2(#var(x), #var(y));"
pub ext fun Float::atanh(self: Float) -> Float = "return atanh(#var(self));"
pub ext fun Float::cbrt(self: Float) -> Float = "return cbrt(#var(self));"
pub ext fun Float::ceil(self: Float) -> Float = "return ceil(#var(self));"
pub ext fun Float::cos(self: Float) -> Float = "return cos(#var(self));"
pub ext fun Float::cosh(self: Float) -> Float = "return cosh(#var(self));"
pub ext fun Float::exp(self: Float) -> Float = "return exp(#var(self));"
pub ext fun Float::expm1(self: Float) -> Float = "return expm1(#var(self));"
pub ext fun Float::floor(self: Float) -> Float = "return floor(#var(self));"
pub ext fun Float::hypot(a: Float, b: Float) -> Float
    = "return hypot(#var(a), #var(b));"
pub ext fun Float::log(self: Float) -> Float = "return log(#var(self));"
pub ext fun Float::log10(self: Float) -> Float = "return log10(#var(self));"
pub ext fun Float::log1p(self: Float) -> Float = "return log1p(#var(self));"
pub ext fun Float::log2(self: Float) -> Float = "return log2(#var(self));"
pub ext fun Float::powi(self: Float, n: Int) -> Float 
    = "return pow(#var(self), (quill_float_t) #var(n));"
pub ext fun Float::powf(self: Float, n: Float) -> Float 
    = "return pow(#var(self), #var(n));"
pub ext fun Float::round(self: Float) -> Float = "return round(#var(self));"
pub ext fun Float::sin(self: Float) -> Float = "return sin(#var(self));"
pub ext fun Float::sinh(self: Float) -> Float = "return sinh(#var(self));"
pub ext fun Float::sqrt(self: Float) -> Float = "return sqrt(#var(self));"
pub ext fun Float::tan(self: Float) -> Float = "return tan(#var(self));"
pub ext fun Float::tanh(self: Float) -> Float = "return tanh(#var(self));"
pub ext fun Float::trunc(self: Float) -> Float = "return trunc(#var(self));"