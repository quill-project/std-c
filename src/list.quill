
mod std

ext fun List::grow[T](self: mut List[T], n: Int) = "
    #include(<string.h>)
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    if(#var(n) <= data->capacity) { return QUILL_UNIT; }
    size_t new_size_bytes = sizeof(#type(T)) * #var(n);
    #type(T) *new_buffer = QUILL_LIST_BUFFER_ALLOC(new_size_bytes);
    if(data->buffer != NULL) {
        size_t copied_size_bytes = sizeof(#type(T)) * data->length;
        memcpy(new_buffer, data->buffer, copied_size_bytes);
        QUILL_LIST_BUFFER_FREE(data->buffer);
    }
    data->buffer = new_buffer;
    data->capacity = #var(n);
    return QUILL_UNIT;
"

pub ext fun List::of_length[T](length: Int, value: T) -> mut List[T] = "
    quill_list_t res = quill_malloc(
        sizeof(quill_list_layout_t),
        &#fun(List::destruct[T])
    );
    quill_list_layout_t *res_data = (quill_list_layout_t *) res->data;
    res_data->buffer = NULL;
    res_data->capacity = 0;
    res_data->length = #var(length);
    #fun(List::grow[T])(res, #var(length));
    #type(T) *res_values = (#type(T) *) res_data->buffer;
    for(quill_int_t i = 0; i < #var(length); i += 1) {
        #rc_add(T)(#var(value));
        res_values[i] = #var(value);
    }
    return res;
"

pub ext fun List::concat[T](low: List[T], high: List[T]) -> mut List[T] = "
    quill_list_layout_t *low_data = (quill_list_layout_t *) #var(low)->data;
    quill_list_layout_t *high_data = (quill_list_layout_t *) #var(high)->data;
    quill_list_t res = quill_malloc(
        sizeof(quill_list_layout_t), 
        &#fun(List::destruct[T])
    );
    quill_list_layout_t *res_data = (quill_list_layout_t *) res->data;
    res_data->buffer = NULL;
    res_data->capacity = 0;
    res_data->length = low_data->length + high_data->length;
    #fun(List::grow[T])(res, res_data->length);
    #type(T) *low_values = (#type(T) *) low_data->buffer;
    #type(T) *high_values = (#type(T) *) high_data->buffer;
    #type(T) *res_values = (#type(T) *) res_data->buffer;
    for(quill_int_t i = 0; i < low_data->length; i += 1) {
        #type(T) value = low_values[i];
        #rc_add(T)(value);
        res_values[i] = value;
    }
    for(quill_int_t i = low_data->length; i < res_data->length; i += 1) {
        #type(T) value = high_values[i - low_data->length];
        #rc_add(T)(value);
        res_values[i] = value;
    }
    return res;
"

ext fun List::slice_unchecked[T](self: List[T], start: Int, end: Int) -> mut List[T] = "
    quill_list_layout_t *src_data = (quill_list_layout_t *) #var(self)->data;
    quill_list_t res = quill_malloc(
        sizeof(quill_list_layout_t),
        &#fun(List::destruct[T])
    );
    quill_list_layout_t *res_data = (quill_list_layout_t *) res->data;
    res_data->buffer = NULL;
    res_data->capacity = 0;
    res_data->length = #var(end) - #var(start);
    #fun(List::grow[T])(res, res_data->length);
    #type(T) *src_values = (#type(T) *) src_data->buffer;
    #type(T) *res_values = (#type(T) *) res_data->buffer;
    for(quill_int_t i = 0; i < res_data->length; i += 1) {
        #type(T) value = src_values[#var(start) + i];
        #rc_add(T)(value);
        res_values[i] = value;
    }
    return res;
"

ext fun List::insert_unchecked[T](self: mut List[T], position: Int, value: T) = "
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    if(data->capacity == 0) {
        #fun(List::grow[T])(#var(self), 16);
    }
    if(data->length == data->capacity) {
        #fun(List::grow[T])(#var(self), data->capacity * 2);
    }
    #type(T) *values = (#type(T) *) data->buffer;
    for(quill_int_t i = data->length; i > #var(position); i -= 1) {
        values[i] = values[i - 1];
    }
    data->length += 1;
    #rc_add(T)(#var(value));
    values[#var(position)] = #var(value);
"

ext fun List::set_unchecked[T](self: mut List[T], position: Int, value: T) = "
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    #type(T) *values = (#type(T) *) data->buffer;
    #type(T) *value = values + #var(position);
    #rc_dec(T)(*value);
    #rc_add(T)(#var(value));
    *value = #var(value);
    return QUILL_UNIT;
"

pub ext fun List::length[T](self: List[T]) -> Int = "
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    return data->length;
"

ext fun List::get_unchecked[T](self: List[T], position: Int) -> T = "
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    #type(T) *values = (#type(T) *) data->buffer;
    #type(T) value = values[#var(position)];
    #rc_add(T)(value);
    return value;
"

ext fun List::splice_unchecked[T](self: mut List[T], start: Int, end: Int) -> mut List[T] = "
    quill_list_t res = #fun(List::slice_unchecked[T])(#var(self), #var(start), #var(end));
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    #type(T) *values = (#type(T) *) data->buffer;
    quill_int_t removed = #var(end) - #var(start);
    for(quill_int_t i = #var(start); i < #var(end); i += 1) {
        #rc_dec(T)(values[i]);
    }
    data->length -= removed;
    for(quill_int_t i = #var(start); i < data->length; i += 1) {
        values[i] = values[i + removed];
    }
    return res;
"

ext fun List::destruct[T](self: mut List[T]) = "
    quill_list_layout_t *data = (quill_list_layout_t *) #var(self)->data;
    if(data->buffer == NULL) { return QUILL_UNIT; }
    #type(T) *values = (#type(T) *) data->buffer;
    for(quill_int_t i = 0; i < data->length; i += 1) {
        #rc_dec(T)(values[i]);
    }
    QUILL_LIST_BUFFER_FREE(data->buffer);
    return QUILL_UNIT;
"
